const { loadImage, createCanvas } = require("canvas");
const axios = require("axios");
const fs = require("fs-extra");

module.exports = {
  config: {
    name: "propose",
    aliases: ["proposal"],
    version: "1.1",
    author: "Kivv √ó AceGun",
    countDown: 5,
    role: 0,
    shortDescription: "@mention someone to propose",
    longDescription: "",
    category: "fun",
    guide: "{pn} mention/tag",
  },

  onStart: async function ({ message, event, args, api }) {
    const mention = Object.keys(event.mentions);
    if (mention.length === 0) {
      return message.reply("Please mention someone");
    }

    // ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡ßß ‡¶ú‡¶® mention ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶á ‡¶∏‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞
    const one = event.senderID;
    const two = mention[0];

    const imagePath = await makeProposeImage(one, two);
    message.reply(
      {
        body: "„Äå Please be mineüòç‚ù§Ô∏è „Äç",
        attachment: fs.createReadStream(imagePath),
      },
      () => fs.unlinkSync(imagePath)
    );
  },
};

async function makeProposeImage(id1, id2) {
  const path = __dirname + `/cache/propose_${id1}_${id2}.png`;

  // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶á‡¶Æ‡ßá‡¶ú URL
  const bgURL = "https://i.ibb.co/RNBjSJk/image.jpg";

  // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ FB ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶õ‡¶¨‡¶ø URL
  const avatar1URL = `https://graph.facebook.com/${id1}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`;
  const avatar2URL = `https://graph.facebook.com/${id2}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`;

  // ‡¶á‡¶Æ‡ßá‡¶ú ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞
  const [bgImg, av1, av2] = await Promise.all([
    loadImage(bgURL),
    loadImage(await getImageBuffer(avatar1URL)),
    loadImage(await getImageBuffer(avatar2URL)),
  ]);

  // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶≠‡¶æ‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞
  const canvas = createCanvas(760, 506);
  const ctx = canvas.getContext("2d");

  // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°
  ctx.drawImage(bgImg, 0, 0, canvas.width, canvas.height);

  // Avatar ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ó‡ßã‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞‡ßá crop ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø mask ‡¶§‡ßà‡¶∞‡¶ø
  function drawCircleAvatar(ctx, img, x, y, size) {
    ctx.save();
    ctx.beginPath();
    ctx.arc(x + size / 2, y + size / 2, size / 2, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.clip();
    ctx.drawImage(img, x, y, size, size);
    ctx.restore();
  }

  // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡ßß ‡¶è‡¶∞ ‡¶è‡¶≠‡¶æ‡¶§‡¶æ‡¶∞
  drawCircleAvatar(ctx, av1, 210, 65, 90);
  // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡ß® ‡¶è‡¶∞ ‡¶è‡¶≠‡¶æ‡¶§‡¶æ‡¶∞
  drawCircleAvatar(ctx, av2, 458, 105, 90);

  // ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶á‡¶Æ‡ßá‡¶ú ‡¶§‡ßà‡¶∞‡¶ø
  const buffer = canvas.toBuffer("image/png");
  await fs.outputFile(path, buffer);

  return path;
}

async function getImageBuffer(url) {
  const response = await axios.get(url, { responseType: "arraybuffer" });
  return Buffer.from(response.data, "utf-8");
}
