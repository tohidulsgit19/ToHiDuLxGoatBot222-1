
const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");

const CACHE_FILE = path.join(__dirname, "..", "cache", "unsentMessages.json");
const DELETE_AFTER = 10 * 60 * 1000; // 10 minutes

// Cache file ensure ‡¶ï‡¶∞‡¶æ
function ensureCacheFile() {
  const folder = path.dirname(CACHE_FILE);
  if (!fs.existsSync(folder)) fs.mkdirSync(folder, { recursive: true });
  if (!fs.existsSync(CACHE_FILE)) fs.writeFileSync(CACHE_FILE, "{}");
}

function loadStore() {
  ensureCacheFile();
  try {
    return JSON.parse(fs.readFileSync(CACHE_FILE, 'utf8'));
  } catch (error) {
    console.error("Error loading unsent store:", error);
    return {};
  }
}

function saveStore(data) {
  try {
    fs.writeFileSync(CACHE_FILE, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error("Error saving unsent store:", error);
  }
}

// ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶´‡¶∞‡¶Æ‡ßá‡¶ü
function formatTime(date) {
  const options = {
    year: 'numeric',
    month: '2-digit', 
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    timeZone: 'Asia/Dhaka'
  };
  return new Intl.DateTimeFormat('bn-BD', options).format(date);
}

// Attachment type check
function getAttachmentType(attachment) {
  const type = attachment.type || 'unknown';
  switch (type) {
    case 'photo': return 'üì∏ ‡¶õ‡¶¨‡¶ø';
    case 'video': return 'üé• ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì';  
    case 'audio': return 'üéµ ‡¶Ö‡¶°‡¶ø‡¶ì';
    case 'file': return 'üìÑ ‡¶´‡¶æ‡¶á‡¶≤';
    case 'sticker': return 'üòÄ ‡¶∏‡ßç‡¶ü‡¶ø‡¶ï‡¶æ‡¶∞';
    case 'animated_image': return 'üé≠ GIF';
    default: return 'üìé ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø';
  }
}

// Thread info get ‡¶ï‡¶∞‡¶æ
async function getThreadInfo(api, threadID) {
  try {
    const threadInfo = await api.getThreadInfo(threadID);
    return {
      name: threadInfo.threadName || `‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ${threadID}`,
      type: threadInfo.isGroup ? "üë• ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™" : "üîí ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§"
    };
  } catch (error) {
    return {
      name: "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°",
      type: "‚ùì ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ"
    };
  }
}

// User info get ‡¶ï‡¶∞‡¶æ
async function getUserInfo(api, userID) {
  try {
    const userInfo = await api.getUserInfo(userID);
    return userInfo[userID]?.name || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ";
  } catch (error) {
    return "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ";
  }
}

module.exports = {
  config: {
    name: "autosentdeletedsms",
    version: "3.0",
    author: "Tohidul (Advanced Version)",
    shortDescription: "Advanced unsend message detector",
    longDescription: "Advanced unsend message detector with better features",
    category: "utility",
    guide: {
      en: "This command automatically tracks all unsent messages and logs them.",
      vi: "T·ª± ƒë·ªông theo d√µi v√† ghi l·∫°i c√°c tin nh·∫Øn b·ªã thu h·ªìi."
    }
  },

  // System initialization
  onStart: async function ({ api }) {
    ensureCacheFile();
    
    // Old messages clean ‡¶ï‡¶∞‡¶æ (‡¶™‡ßç‡¶∞‡¶§‡¶ø 30 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá)
    setInterval(() => {
      const store = loadStore();
      let changed = false;
      const now = Date.now();
      
      for (const id in store) {
        if (now - store[id].timestamp > DELETE_AFTER) {
          delete store[id];
          changed = true;
        }
      }
      
      if (changed) {
        saveStore(store);
        console.log(`üßπ ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ${Object.keys(store).length}‡¶ü‡¶ø unsend ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`);
      }
    }, 30000);

    console.log("‚úÖ Auto Unsend Detector ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
  },

  // ‡¶∏‡¶¨ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú save ‡¶ï‡¶∞‡¶æ
  onChat: async function ({ event, api }) {
    if (!event || !event.messageID || event.type !== "message") return;
    
    const store = loadStore();
    
    // User info get ‡¶ï‡¶∞‡¶æ
    let senderName = "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ";
    try {
      senderName = await getUserInfo(api, event.senderID);
    } catch (error) {
      // Ignore error
    }

    // Message data store ‡¶ï‡¶∞‡¶æ
    store[event.messageID] = {
      senderID: event.senderID,
      senderName: senderName,
      threadID: event.threadID,
      body: event.body || null,
      attachments: event.attachments || [],
      mentions: event.mentions || {},
      timestamp: Date.now(),
      messageReply: event.messageReply || null,
      isGroup: event.isGroup || false
    };
    
    saveStore(store);
  },

  // Unsend detect ‡¶ï‡¶∞‡¶æ - ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á main fix
  handleEvent: async function ({ api, event }) {
    if (event.type !== "message_unsend") return;

    const store = loadStore();
    const savedMsg = store[event.messageID];
    
    // Message check ‡¶ï‡¶∞‡¶æ
    if (!savedMsg || Date.now() - savedMsg.timestamp > DELETE_AFTER) {
      console.log(`‚ö†Ô∏è Unsend ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø: ${event.messageID}`);
      return;
    }

    try {
      // Thread info get ‡¶ï‡¶∞‡¶æ
      const threadInfo = await getThreadInfo(api, savedMsg.threadID);

      // Report message ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
      let reportMsg = `üö® ùó®ùóªùòÄùó≤ùóªùó± ùóóùó≤ùòÅùó≤ùó∞ùòÅùó≤ùó± üö®
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶ï: ${savedMsg.senderName}
üÜî ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: ${savedMsg.senderID}
${threadInfo.type}: ${threadInfo.name}
üìç ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶Ü‡¶á‡¶°‡¶ø: ${savedMsg.threadID}
üïí ‡¶∏‡¶Æ‡¶Ø‡¶º: ${formatTime(new Date())}
üì® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø: ${event.messageID}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

      // Message content add ‡¶ï‡¶∞‡¶æ
      if (savedMsg.body) {
        reportMsg += `üìù ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú:\n"${savedMsg.body}"\n\n`;
      }

      // Mentions add ‡¶ï‡¶∞‡¶æ
      if (savedMsg.mentions && Object.keys(savedMsg.mentions).length > 0) {
        reportMsg += `üë• ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶∞‡¶æ:\n`;
        for (const [uid, name] of Object.entries(savedMsg.mentions)) {
          reportMsg += `‚Ä¢ ${name.replace('@', '')} (${uid})\n`;
        }
        reportMsg += `\n`;
      }

      // Reply info add ‡¶ï‡¶∞‡¶æ  
      if (savedMsg.messageReply) {
        reportMsg += `‚Ü©Ô∏è ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú: "${savedMsg.messageReply.body || 'Media/Attachment'}"\n\n`;
      }

      // Attachments handle ‡¶ï‡¶∞‡¶æ
      const files = [];
      if (savedMsg.attachments && savedMsg.attachments.length > 0) {
        reportMsg += `üìé ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø: ${savedMsg.attachments.length}‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤\n`;
        
        for (let i = 0; i < Math.min(savedMsg.attachments.length, 10); i++) { // Max 10 attachments
          const att = savedMsg.attachments[i];
          const attType = getAttachmentType(att);
          reportMsg += `${i + 1}. ${attType}\n`;
          
          const url = att.url || att.previewUrl || att.largePreview;
          if (url) {
            try {
              const response = await axios.get(url, { 
                responseType: "arraybuffer",
                timeout: 30000, // 30 seconds timeout
                maxContentLength: 100 * 1024 * 1024, // 100MB limit
                headers: {
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
              });
              
              const ext = path.extname(url).toLowerCase() || (att.type === 'photo' ? '.jpg' : '.dat');
              const fileName = `unsend_${Date.now()}_${i}${ext}`;
              const filePath = path.join(__dirname, "..", "cache", fileName);
              
              await fs.writeFile(filePath, response.data);
              files.push(fs.createReadStream(filePath));
              
            } catch (downloadError) {
              console.error(`Attachment ${i} download error:`, downloadError.message);
              reportMsg += `  ‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ${downloadError.message}\n`;
            }
          }
        }
        reportMsg += `\n`;
      }

      reportMsg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö° Advanced Unsend Detector
üõ°Ô∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶á ‡¶≤‡ßÅ‡¶ï‡¶ø‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ!
üîç Total Saved Messages: ${Object.keys(store).length}`;

      // Report send ‡¶ï‡¶∞‡¶æ - ‡¶∏‡ßá‡¶á ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶á ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá unsend ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
      const messageOptions = {
        body: reportMsg
      };

      if (files.length > 0) {
        messageOptions.attachment = files;
      }

      // Same thread ‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã - ‡¶è‡¶ü‡¶æ‡¶á main fix
      api.sendMessage(messageOptions, savedMsg.threadID, (error, info) => {
        if (error) {
          console.error("Unsend report ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", error.message);
          
          // Fallback: ‡¶ï‡ßã‡¶®‡ßã error ‡¶π‡¶≤‡ßá text-only message ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
          api.sendMessage(`üö® Unsend Detected üö®\nüë§ User: ${savedMsg.senderName}\nüÜî ID: ${savedMsg.senderID}\nüìù Message: "${savedMsg.body || 'Media message'}"\n‚ö†Ô∏è Attachment processing failed`, savedMsg.threadID);
        } else {
          console.log(`‚úÖ Unsend report ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${event.messageID}`);
        }
        
        // Files cleanup ‡¶ï‡¶∞‡¶æ
        files.forEach(file => {
          try {
            if (file.path && fs.existsSync(file.path)) {
              fs.unlinkSync(file.path);
            }
          } catch (cleanupError) {
            console.error("File cleanup error:", cleanupError.message);
          }
        });
      });

      // Store ‡¶•‡ßá‡¶ï‡ßá remove ‡¶ï‡¶∞‡¶æ
      delete store[event.messageID];
      saveStore(store);

    } catch (error) {
      console.error("HandleEvent ‡¶è ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", error);
      
      // Fallback message - same thread ‡¶è
      try {
        await api.sendMessage(`üö® Unsend Detected üö®\nüë§ User: ${savedMsg.senderName}\nüÜî ID: ${savedMsg.senderID}\nüìù Message: "${savedMsg.body || 'No text'}"\n‚ö†Ô∏è Processing error occurred`, savedMsg.threadID);
      } catch (fallbackError) {
        console.error("Fallback message error:", fallbackError);
      }
    }
  }
};
